<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
      http://www.springframework.org/schema/security
      http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <http security="none" pattern="/favicon.ico"/>
    <http security="none" pattern="/static/**"/>
    
    <http auto-config="true" use-expressions="true" access-decision-manager-ref="httpAccessDecisionManager">
        <intercept-url pattern="/login/" access="isAnonymous()"/>
        <intercept-url pattern="/**" access="hasRole('${security.access_role:ROLE_USER}')"  />
        <form-login login-page="/login/" authentication-failure-url="/login/?error=true"/>
        <logout logout-url="/logout/" logout-success-url="/login/"/>
        <remember-me data-source-ref="dataSource" /> 
    </http>
 
    <authentication-manager>
        <authentication-provider user-service-ref="FramesetSecurityDao">
            <password-encoder ref="passwordEncoder">
                <salt-source ref="saltSource" />
            </password-encoder>
        </authentication-provider>
    </authentication-manager>
    
    <global-method-security secured-annotations="enabled" pre-post-annotations="enabled">
        <expression-handler ref="expressionHandler" />
    </global-method-security>
    
    <beans:bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
        <beans:property name="permissionEvaluator" ref="permissionEvaluator" />
        <beans:property name = "roleHierarchy" ref="roleHierarchy"/>
    </beans:bean>
    
    <beans:bean id="permissionEvaluator" class="org.springframework.security.acls.AclPermissionEvaluator">
        <beans:constructor-arg ref="aclService"/>
    </beans:bean>

    <beans:bean id="httpAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <beans:property name="decisionVoters">
            <beans:list>
                <beans:bean  class="org.springframework.security.access.vote.RoleHierarchyVoter">
                    <beans:constructor-arg ref="roleHierarchy" />
                </beans:bean>
                <beans:bean class="org.springframework.security.web.access.expression.WebExpressionVoter">
                    <beans:property name="expressionHandler">
                        <beans:bean class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">
                            <beans:property name="roleHierarchy" ref="roleHierarchy"/>
                        </beans:bean>
                    </beans:property>
                </beans:bean>
            </beans:list>
        </beans:property>
    </beans:bean>
    
    <beans:bean id="roleHierarchy" class="pl.exsio.frameset.security.rolehierarchy.FramesetRoleHierarchy">
        <beans:property name="securityRepositories" ref="securityRepositoryProvider" />
    </beans:bean>

    <beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    
    <beans:bean id="saltSource" class="pl.exsio.frameset.security.salt.EmptySaltSource">
    </beans:bean>
    
    <beans:bean id="FramesetSecurityDao" class="pl.exsio.frameset.security.dao.FramesetSecurityDao">
        <beans:property name="dataSource" ref="dataSource"/>
        <beans:property name="enableAuthorities" value="true"/>
        <beans:property name="enableGroups" value="true"/>
        <beans:property name="usersByUsernameQuery">
            <beans:value> 
                select u.username, u.password, u.is_enabled 
                from security_users u 
                where u.username = ?
            </beans:value>           
        </beans:property>
        <beans:property name="authoritiesByUsernameQuery">
            <beans:value> 
                select u.username, r.role_name
                from security_users u 
                inner join security_users_roles u_r 
                on u.id = u_r.user_id 
                inner join security_roles r 
                on r.id = u_r.role_id 
                where u.username = ?
            </beans:value>           
        </beans:property>
        <beans:property name="groupAuthoritiesByUsernameQuery">
            <beans:value> 
                select g.id, g.group_name, r.role_name 
                from security_groups g 
                inner join security_users_groups u_g 
                on g.id = u_g.group_id 
                inner join security_users u 
                on u.id = u_g.user_id 
                inner join security_groups_roles as g_r 
                on g.id = g_r.group_id 
                inner join security_roles r 
                on r.id = g_r.role_id 
                where u.username = ?
            </beans:value>           
        </beans:property>
    </beans:bean>
  

</beans:beans>